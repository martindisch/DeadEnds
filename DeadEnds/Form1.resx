<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIADZDQAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgGAAAAXHKoZgAADaBJ
        REFUeNrt3X2MHOV9wPHvHLmrjkj4QLUjoaYtEvaWP/p/JKKkDaRVW9NspMZJVSmSI+INQbJ0iKYSkJAE
        itWzxQGJEtYQIiElJEcqBmwcNdgUCK6qgiNoIpo1yK6CsGQfObAlfHCX2+kfc8fZ9du97M4zz8z3I1mW
        /CL9LGu/88wzszNJs93J0CwwN/9jGnh3/ucT8z+OA1PAm8AkcBR4AzgCHGFo6ES6+YrQ/wZp2RIDsGpz
        5HE4DBwCDgId4NdAJ2013gk9oHQuBqC/Zsij8DLwC+AF4CW63bfSG64KPZtkAAL4HfnqYP/8j2dJeD3d
        0vD/QYUzAOFlwGvA08DPgL1pq3Ei9FCqBwNQPjPAfwCPA0+krcah0AOpugxAuWXk+wePAhMkyWvplg2h
        Z1KFGIB4dIEDwMPARNpqHAs9kOJnAOL0HvAksJN8z2Au9ECKkwGI3yHgAeB7aasxGXoYxcUAVMdJ4BHg
        nrTV+FXoYRQHA1A9GbAHGEvgucdajdDzqMQMQHVlwM+BO0mSvemWDf4/6wwGoB6eB75Kt/uMtyDrVAag
        PjLgKeAWkuSA9xMIYCD0ACpMAvwF8F9k2cPNdufDoQdSeK4A6msaGAP+JW01pkMPozAMgA4DNwFp6hWD
        2vEUQFcAjwFps935o9DDqFgGQAs+Bfx3s93Z2ry/c1HoYVQMA6BTXQLcS8LTzXZnfehh1H8GQGfzMeCl
        ZrtzY3PnwST0MOofA6BzuRj4Nln2ZLPduTz0MOoPrwJoKY4Bm0mSPd5AVC2uALQU64BdZNn2ZrszFHoY
        9Y4B0FINADcD+5rtzh+EHka9YQC0XB8FXmy2O38eehCtngHQSnwI+Ldmu7O1+f3DoWfRKhgArdQgcC8z
        M99rtju/F3oYrYwB0Gp9gXw18PuhB9HyGQD1wseB/c12x2uEkTEA6pUNwPPNducjoQfR0hkA9dJa8suE
        14UeREtjANRrFwP/2mx3Ph96EF2YAVA/DAIPNdudrc2dB0PPovMwAOqXi4B7yLJbjEB5GQD1UwLcSZZ9
        vXl/J/QsOgsDoH5LgNtJ+KYRKB8DoKJ8lYTbPR0oFwOgIt3unkC5GAAVaWFPYGvoQZQzACpaAtztfQLl
        YAAUwkXAg94xGJ4BUCiDwCN+dyAsA6CQPgg84bcIwzEACm0tsMvnCYRhAFQGG4Cf+GSh4hkAlcXHge/4
        jMFiGQCVyReYmfEegQIZAJXNDh85XhwDoLJZuDzoy0cKYABURh8ij4CvIeszA6Cy+ijwz35xqL8MgMrs
        JrLsr0MPUWUGQGU2AHy/2e5cHnqQqjIAKrt1wIPNnQeT0INUkQFQDP6KLPty6CGqyAAoFmPNdmd96CGq
        xgAoFhcDDzbv71wUepAqMQCKycdIuDH0EFViABSbO5rtzh+GHqIqDIBicwlwX7PtOwZ6wQAoRp8CmqGH
        qAIDoFjd3Wx3hkMPETsDoFhdAXxlpX95fPeadeO710yE/keEZgAUs39qtjsfXs5fGN81wvjuNZuAXwKf
        Cf0PCM0AKGbDLOMbg+O716wjySaAH5HfYlx7Hwg9gLRK/0CW3QscONcfGN81Akn2GeDb+ME/jSsAxW4A
        uKv53f8562/OH/V/DEzgh/8MrgBUBZ9kYODPgGcWfmH8sREY9Kh/Ia4AVAUJcOfCV4bHd69Zx2A2gUf9
        C3IFoKq4mqz7yfHda9bgUX/JDIAqYXBgij+59I4JYE3oWWJiABS9tcN7WT+yg8GBKT/8y2QAFK3BgbdY
        PzLG2uF9oUeJlgFQlPKj/nYGB94KPUrUDICiMjQwxZUjO1g7vDf0KJVgABSNU871Q49SGQZApZef62/3
        qN8HBkCltnZ4H+tHxjzX7xMDoFJyh78YBkCl4w5/cQyASmNwYIr17vAXygCoFNYO7+XKkR0MucNfKAOg
        oNzhD8sAKBh3+MMzACqc5/rlYQBUKO/mKxcDoEJ4rl9OBkB957l+eRkA9Y1H/fIzAOoL7+aLgwFQT+U7
        /Nu9hz8SBkA94w5/fAyAVs1z/XgZAK2KO/xxMwBaEb+vXw0GQMvmDn91GAAtmffwV48B0JLk5/rb3eGv
        GAOg83KHv9oMgM7Jc/3qMwA6gzv89WEAdBqP+vViAAS4w19XBkDew19jBqDm1o+McfkHfxJ6DAUyEHoA
        hfW/J77I5PS1ocdQIAag5ma7l/LK1F28MnUXM93LQo+jghkAATA5fS0vHv2hq4GaMQB632z3svdXA7Pd
        S0OPowIYAJ1hcvpaXjj6Iyanrwk9ivrMAOis8r2Bbbwytc3VQIUZAJ3X5PQ186sB9waqyADogk69UjDr
        lYJKMQBaMq8UVI8B0LLMeKWgUgyAVsQrBdVgALRii1cK3BuIlQHQquWrAfcGYmQA1BPeRRgnA6CeylcD
        j7g3EAkDoJ7LVwPbXA1EwACobxavFLg3UFYGQH11+l2ErgbKxgCoEIt7A64GysQAqDBeKSgfA6DCeRdh
        eRgAqcZ8LLgK59uHysMAqDC+fah8DIAKsXZ43/xR37cPlYkBUF/lbxre7lG/pAyA+sZz/fIzAOq5/Kg/
        xtrhfaFH0QUYAPWUR/24GAD1hDv8cTIAWrX8qL/DHf4IGQCtmOf68TMAWhHP9avBAGhZhgamuNJz/cow
        AFoyz/WrxwDogrybr7oMgM4rv4d/zHP9ijIAOit3+OvBAOgM7vDXhwHQ+7ybr34MgID8qH/lyA6G3OGv
        FQNQc+7w15sPBa25P77kAT/8NWYAau7Vt78y/5z+y0KPogAMgOaf0/9D39pTQwZAgG/tqSsDoNMsvsPP
        t/bUgQHQGfLVwDZXAzVgAHROi+/wc2+gqgyAzmu2e6l7AxVmALQki3sDrgaqxABoybxSUD0GQMu2uDfg
        lYLYGQCtSL43sI1Xpra5GoiYAdCqTE5f45WCiBkArdrpVwr8TkFMDIB6ZvE7Be4NxMIAqKe8izAuBkB9
        4V2EcTAA6pvFvQGvFJSVAVDfeaWgvAyACuGVgnIyACqUVwrKxQCocItXCtwbCM0AKBj3BsIzAArq1L2B
        GfcGCmcAVAqT09fyok8mLpwBUGn4vIHiGQCVjs8bKI4BUCn5vIFiGACVmlcK+ssAqPS8i7B/DICi4ZWC
        3jMAisqMVwp6ygAoSl4p6A0DoGgtXilwb2ClDICit/ANw6l3rz4eepbYGABVwmz3Mn7527s3AZuAY6Hn
        iYUBUFXsJxl4anTj8UeBPwUeDT1QDAyAqiADbku3bMgARjceP8Zssgn4LK4GzssAqAqeott95tRfGP30
        24xuPD5BvhqYCD1gWRkAxa4L3JLecNVZf3N04/FjZMlncW/grAyAYvcDkuTA+f7A6HVv8//2BrLQQ5eF
        AVDMTgK3pls2LOkPz68GNgGfw9UAYAAUt7G01Xh9OX9hfjWwsDdQ+ysFHwg9gLRCh4Gxlf7l0Y3Hj5Hv
        C9SaKwDF6qa01ZgOPUTsDIBi9DiQhh6iCgyAYnMC2Jq2GqHnqAQDoNjclrYavwk9RFUYAMXkOTK+E3qI
        KjEAisVJ4Pr0S4250INUiQFQLP4xbTVeDT1E1RgAxeCnDCTfDT1EFRkAld0x4Pr0ixu8f78PDIDKrAts
        TluNI6EHqSoDoDK7myTZE3qIKjMAKqvnWcY3/bQyBkBldBT4XNpqzIQepOoMgMpmFvj7tNV4I/QgdWAA
        VDY3p63Gv4ceoi4MgMrkIYaG7gs9RJ0YAJXFs8CX081XhJ6jVgyAyuAg8Hdpq/Fe6EHqxgAotEngurTV
        eDP0IHVkABTSO8Dfpq3GwdCD1JUBUCgLl/v+M/QgdWYAFMIccH3aauwKPUjdGQAVLQNG01bj4dCDyACo
        WBlwK0nyrdCDKGcAVKRvkCTb/IJPeRgAFeUO4Bt++MvFAKjfMuDrwNd8ln/5+G5A9VMG3EaS3OWRv5wM
        gPplDhglSb7lh7+8DID6YZb8Or+X+krOAKjX3iG/w8+bfCJgANRLk+T39nt7byQMgHrlIPm3+vxiT0S8
        DKheeBa42g9/fAyAVush4C/9Pn+cPAXQSs0CNzM0dJ+P8YqXAdBKHCXf6ffpvZEzAFqu58lf2uFz+yvA
        PQAtVRfYAVzjh786XAFoKY4Bm0mSPd7WWy0GQBfyU/Lben1FdwV5CqBzOQncyEDyN374q8sVgM7mOfKj
        /quhB1F/uQLQqU4AW8n4hB/+enAFoAWPA1vTVuM3oQdRcVwB6DDwaaDph79+XAHU10lgDBhLW43p0MMo
        DANQP13gB8CtaavxeuhhFJYBqI8MeAq4hSQ54A09AgNQF/uB2+h2n0lvuCr0LCoRA1BdGfBz4E6SZG+6
        ZUMWeiCVjwGongzYA2wnSZ51qa/zMQDVcRJ4BLgnbTV+FXoYxcEAxO8Q8ADwoI/l0nIZgDi9BzwJ7AT2
        pq3GXOiBFCcDEI8ucAB4GPhx2mpMhh5I8TMA5ZYBLwOPAhMkyWtu6qmXDED5zJBft38CeCJtNQ6FHkjV
        ZQDCy4DXgKeBn5Gf058IPZTqwQAU73fAr8mP8vvJ36rzetpqeKOOCmcA+muG/DLdy8AvgBeAl+h23/KW
        XJWBAVi9OWCK/Hv1h8hfktkhP8p30lbjndADSudiAHKz5B/kOWAaeHf+5xPzP46Tf8gngTfJ34zzBnAE
        OOI5u2L1f01Ov3iLPKdfAAAAAElFTkSuQmCC
</value>
  </data>
</root>